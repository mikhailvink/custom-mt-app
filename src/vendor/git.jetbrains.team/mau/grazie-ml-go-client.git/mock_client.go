// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package zendeskgo_sell is a generated GoMock package.
package zendeskgo_sell

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Chat mocks base method.
func (m *MockClient) Chat(ctx context.Context, profile string, messages []ChatMessage) (*ChatMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Chat", ctx, profile, messages)
	ret0, _ := ret[0].(*ChatMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Chat indicates an expected call of Chat.
func (mr *MockClientMockRecorder) Chat(ctx, profile, messages interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chat", reflect.TypeOf((*MockClient)(nil).Chat), ctx, profile, messages)
}

// QuestionAnswering mocks base method.
func (m *MockClient) QuestionAnswering(ctx context.Context, llmProfile, dataSource, query string, docsSize int64) (*QuestionAnsweringResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuestionAnswering", ctx, llmProfile, dataSource, query, docsSize)
	ret0, _ := ret[0].(*QuestionAnsweringResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuestionAnswering indicates an expected call of QuestionAnswering.
func (mr *MockClientMockRecorder) QuestionAnswering(ctx, llmProfile, dataSource, query, docsSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuestionAnswering", reflect.TypeOf((*MockClient)(nil).QuestionAnswering), ctx, llmProfile, dataSource, query, docsSize)
}

// Translate mocks base method.
func (m *MockClient) Translate(ctx context.Context, langFrom, langTo string, strings []string) (*TranslateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Translate", ctx, langFrom, langTo, strings)
	ret0, _ := ret[0].(*TranslateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Translate indicates an expected call of Translate.
func (mr *MockClientMockRecorder) Translate(ctx, langFrom, langTo, strings interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Translate", reflect.TypeOf((*MockClient)(nil).Translate), ctx, langFrom, langTo, strings)
}
